<?php

declare(strict_types=1);

namespace App\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * CustomerRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerRepository extends EntityRepository
{
    public function getCustomersLike($lastname, $page, $limit)
    {
        $q = $this
            ->createQueryBuilder('c')
            ->select('c, a')
            ->where('c.id > 1 AND ((c.lastname LIKE :lastname or c.firstname LIKE :lastname) OR a.company LIKE :lastname)')
            ->leftJoin('c.customerAddresses', 'a')
            ->setParameter('lastname', $lastname)
            ->addOrderBy('c.lastname', 'ASC')
            ->setFirstResult(($page - 1) * $limit)
            ->setMaxResults($limit)
            ->getQuery();

        $paginator = new Paginator($q, $fetchJoinCollection = false);

        return $paginator;
    }

    private function getQueryForFilter($search, $page, $limit)
    {
        $q = $this
            ->createQueryBuilder('c')
            ->select('c, a')
            ->where('c.id > 1 AND ((c.lastname LIKE :search or c.firstname LIKE :search) OR '
                    .'(a.company LIKE :search or a.email LIKE :search or a.mobile_phone LIKE :search '
                    .'or a.address LIKE :search or a.phone LIKE :search))')
            ->leftJoin('c.customerAddresses', 'a')
            ->setParameter('search', '%'.$search.'%')
            ->addOrderBy('c.lastname', 'ASC')
            ->setFirstResult(($page - 1) * $limit)
            ->setMaxResults($limit)
            ->distinct()
            ->getQuery();

        return $q;
    }

    public function findByFilter($search, $page = 1, $limit = 20)
    {
        $q = $this->getQueryForFilter($search, $page, $limit);
        $paginator = new Paginator($q, $fetchJoinCollection = false);

        return $paginator;
    }

    public function findByFilterToArray($search, $page = 1, $limit = 20)
    {
        $q = $this->getQueryForFilter($search, $page, $limit);

        return $q->getArrayResult();
    }

    public function getLastCustomers($limit = 5)
    {
        $q = $this
            ->createQueryBuilder('c')
            ->select('c')
            ->addOrderBy('c.id', 'DESC')
            ->setFirstResult(0)
            ->setMaxResults($limit)
            ->getQuery();
        $result = $q->getResult();
        if (!is_array($result)) {
            $result = [];
        }

        return $result;
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
        || is_subclass_of($class, $this->getEntityName());
    }
}
